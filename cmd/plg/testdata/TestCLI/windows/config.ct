$ plg config -help
Configure a dotfile in the configuration file.

USAGE:
    config [OPTIONS] [TARGET]

OPTIONS:
    -b, -basedir <DIR>                      Set the target's base directory. Works recursively for all nested targets, unless overridden.
        -exclude <TARGET 1,...,TARGET n>    Comma-separated list of targets to be excluded when scanning the target.
    -f, -flatten                            Prevent the target from being included in the link name.
    -h, -help                               Print this help message.
        -include <TARGET 1,...,TARGET n>    Comma-separated list of targets to be included when scanning the target.
    -l, -link <NAME>                        Set the target's link name.
    -s, -scandir                            Scan the target and set its files as its own targets.
    -S, -scanhidden                         Include hidden files when scanning the target.
    -H, -usehome                            Use home directory as the target's base directory and recursively for all nested targets, unless overridden.

$ plg config -h
Configure a dotfile in the configuration file.

USAGE:
    config [OPTIONS] [TARGET]

OPTIONS:
    -b, -basedir <DIR>                      Set the target's base directory. Works recursively for all nested targets, unless overridden.
        -exclude <TARGET 1,...,TARGET n>    Comma-separated list of targets to be excluded when scanning the target.
    -f, -flatten                            Prevent the target from being included in the link name.
    -h, -help                               Print this help message.
        -include <TARGET 1,...,TARGET n>    Comma-separated list of targets to be included when scanning the target.
    -l, -link <NAME>                        Set the target's link name.
    -s, -scandir                            Scan the target and set its files as its own targets.
    -S, -scanhidden                         Include hidden files when scanning the target.
    -H, -usehome                            Use home directory as the target's base directory and recursively for all nested targets, unless overridden.

$ mkdir targets
$ mkdir links
$ cd targets
$ plg config --> FAIL
plg: open pilgo.yml: The system cannot find the file specified.

$ cp pilgo.yml .
$ plg config -basedir rootdir
$ cat pilgo.yml
baseDir: rootdir

$ plg config -basedir testdata test
$ cat pilgo.yml
baseDir: rootdir
options:
  test:
    baseDir: testdata

$ plg config -flatten test
$ cat pilgo.yml
baseDir: rootdir
options:
  test:
    flatten: true

$ plg config -scandir test --> FAIL
plg: open test: The system cannot find the file specified.

$ fecho test
$ plg config -scandir test --> FAIL
plg: Readdir test: The system cannot find the path specified.

$ mkdir testdir
$ cd testdir
$ fecho test_1
$ fecho test_2
$ cd ..
$ plg config -s
$ cat pilgo.yml
targets:
- test
- testdir

$ plg config -s testdir
$ cat pilgo.yml
targets:
- test
- testdir
options:
  testdir:
    targets:
    - test_1
    - test_2

$ plg config -s -include test_1 testdir
$ cat pilgo.yml
targets:
- test
- testdir
options:
  testdir:
    targets:
    - test_1

$ plg config -s -exclude test_1 testdir
$ cat pilgo.yml
targets:
- test
- testdir
options:
  testdir:
    targets:
    - test_2

$ cp pilgo_tags.yml .
$ plg -config pilgo_tags.yml config -link testlink test
$ cat pilgo_tags.yml
baseDir: links
targets:
- bar
- foo
- test
options:
  bar:
    tags:
    - bar
    - test
  test:
    link: testlink

$ plg -c pilgo_tags.yml config -usehome test
$ cat pilgo_tags.yml
baseDir: links
targets:
- bar
- foo
- test
options:
  bar:
    tags:
    - bar
    - test
  test:
    useHome: true

$ plg config -H test
$ cat pilgo.yml
targets:
- test
- testdir
options:
  test:
    useHome: true
  testdir:
    targets:
    - test_2
